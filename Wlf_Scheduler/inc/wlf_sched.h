/* DO NOT EDIT THIS FILE
 * - wlf_sched.h (Part of the Wlf Scheduler)

 *   Definitions for the Wlf Scheduler System
 */

#ifndef WLF_SCHED_H
#define WLF_SCHED_H

#include "strawhat_process.h"
#include "strawhat_settings.h"

// Process Node Definition
typedef struct wlf_process_node {
  pid_t pid;            // PID of the Process you're Tracking
  char *cmd;            // Name of the Process being run
  unsigned short state; // 16-bit: Contains Current State of Process, Critical and High Flags, AND Exit Code
  int age;              // How long this has been in the Ready Queue - Normal since last run
  struct wlf_process_node *next; // Pointer to next Process Node in a linked list
} Wlf_process_s;

// Queue Header Definition
typedef struct wlf_queue_header {
  int count;            // How many Nodes are in this linked list?
  Wlf_process_s *head; // Points to FIRST node of linked list.  No Dummy Nodes.
  Wlf_process_s *tail; // Points to LAST node of linked list.  No Dummy Nodes. Optional.
} Wlf_queue_s;

// Schedule Header Definition
typedef struct wlf_schedule {
  Wlf_queue_s *ready_queue_high;    // Linked List of Processes (High Priority) ready to Run on CPU
  Wlf_queue_s *ready_queue_normal;  // Linked List of Processes (Normal Priority) ready to Run on CPU
  Wlf_queue_s *terminated_queue; // Linked List of Terminated Processes 
} Wlf_schedule_s;

typedef struct create_data {
  char original_cmd[MAX_CMD]; // Original user-input command
  int is_high;              // 1 if the process is a High Priority process
  int is_critical;          // 1 if the process is run with critical permissions
  pid_t pid;                // OS Generated, Guaranteed Unique
} Wlf_create_data_s;

// Prototypes
Wlf_schedule_s *wlf_initialize();
Wlf_process_s *wlf_create(Wlf_create_data_s *data);
int wlf_enqueue(Wlf_schedule_s *schedule, Wlf_process_s *process);
int wlf_count(Wlf_queue_s *queue);
Wlf_process_s *wlf_select(Wlf_schedule_s *schedule);
int wlf_promote(Wlf_schedule_s *schedule);
int wlf_reap(Wlf_schedule_s *schedule, pid_t pid);
int wlf_exited(Wlf_schedule_s *schedule, Wlf_process_s *process, int exit_code);
int wlf_killed(Wlf_schedule_s *schedule, pid_t pid, int exit_code);
int wlf_get_ec(Wlf_process_s *process);
void wlf_cleanup(Wlf_schedule_s *schedule);

#endif
